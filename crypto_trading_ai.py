# -*- coding: utf-8 -*-
"""Crypto Trading AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y-gRpkXlPua7bQSWxEQy-9kLJEKpU3q-
"""

import tensorflow as tf
import yfinance
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
import numpy as np
import math
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout

today = datetime.today().strftime('%Y-%m-%d')

raw1 = yfinance.download('BTC-USD',start='2012-01-01',end=today)['Close']
raw2 = yfinance.download('ETH-USD',start='2012-01-01',end=today)['Close']
raw3 = yfinance.download('SOL-USD',start='2012-01-01',end=today)['Close']
raw4 = yfinance.download('YGG-USD',start='2012-01-01',end=today)['Close']
raw5 = yfinance.download('ARKM-USD',start='2012-01-01',end=today)['Close']
raw6 = yfinance.download('PENDLE-USD',start='2012-01-01',end=today)['Close']
raw7 = yfinance.download('XRP-USD',start='2012-01-01',end=today)['Close']
raw8 = yfinance.download('BNB-USD',start='2012-01-01',end=today)['Close']
raw9 = yfinance.download('MKR-USD',start='2012-01-01',end=today)['Close']
raw0 = yfinance.download('ADA-USD',start='2012-01-01',end=today)['Close']

r1 = np.reshape(raw1,(len(raw1),1))
r2 = np.reshape(raw2,(len(raw2),1))
r3 = np.reshape(raw3,(len(raw3),1))
r4 = np.reshape(raw4,(len(raw4),1))
r5 = np.reshape(raw5,(len(raw5),1))
r6 = np.reshape(raw6,(len(raw6),1))
r7 = np.reshape(raw7,(len(raw7),1))
r8 = np.reshape(raw8,(len(raw8),1))
r9 = np.reshape(raw9,(len(raw9),1))
r0 = np.reshape(raw0,(len(raw0),1))

scaler = MinMaxScaler(feature_range=(0,1))
scaled1 = scaler.fit_transform(r1)
scaled2 = scaler.fit_transform(r2)
scaled3 = scaler.fit_transform(r3)
scaled4 = scaler.fit_transform(r4)
scaled5 = scaler.fit_transform(r5)
scaled6 = scaler.fit_transform(r6)
scaled7 = scaler.fit_transform(r7)
scaled8 = scaler.fit_transform(r8)
scaled9 = scaler.fit_transform(r9)
scaled0 = scaler.fit_transform(r0)

inp_size = 30
out_size = 7
tt_index = 0.8
xtrain,ytrain,xtest,ytest = [],[],[],[]

def prepdata(data):
  lim = math.floor(len(data)*tt_index)
  for i in range(inp_size,len(data)-1):
    if i < lim:
      xtrain.append(data[i-inp_size:i])
      ytrain.append(data[i:i+1])
    else:
      xtest.append(data[i-inp_size:i])
      ytest.append(data[i:i+1])

prepdata(scaled0)
prepdata(scaled1)
prepdata(scaled3)
prepdata(scaled4)
prepdata(scaled5)
prepdata(scaled6)
prepdata(scaled7)
prepdata(scaled8)
prepdata(scaled9)
xtrain,ytrain,xtest,ytest = np.array(xtrain),np.array(ytrain),np.array(xtest),np.array(ytest)

model = Sequential([
    LSTM(inp_size,input_shape=(inp_size,1)),
    Dense(64),
    Dense(16),
    Dense(1)
])

model.compile(loss='mse',optimizer='adam')

model.summary()

history = model.fit(xtrain,ytrain,epochs=200,batch_size=50)
# xtrain.shape[0]+ytrain.shape[0]

# 0.0009881240548565984
model.evaluate(xtest,ytest)

model.save('my.h5')

#test here
def predict(seq):
  res = []
  bb = seq.tolist()
  for i in range(out_size):
    r = model.predict(bb[-inp_size:])
    res.append(r[0])
    bb.append(r[0])
  return np.array(res)

import matplotlib.pyplot as plt

def predict(seq):
  res = []
  for _ in range(out_size):
    r = model.predict(seq[-out_size:])[0][0]
    res.append([r])
    seq.append([r])
  return res

pred = scaler.inverse_transform(predict(xtest[0].tolist()))
real = scaler.inverse_transform(np.reshape(ytest[0:0+out_size],(out_size,1)))

plt.plot(pred,'orange')
plt.plot(real,'black')
plt.show()